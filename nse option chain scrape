
# Libraries
import requests
import json
import math
import datetime, time
import csv
import os
import pandas as pd
from pathlib import Path
from os.path import exists as file_exists

# Python program to print
# colored text and background
def strRed(skk):         return "\033[91m {}\033[00m".format(skk)
def strGreen(skk):       return "\033[92m {}\033[00m".format(skk)
def strYellow(skk):      return "\033[93m {}\033[00m".format(skk)
def strLightPurple(skk): return "\033[94m {}\033[00m".format(skk)
def strPurple(skk):      return "\033[95m {}\033[00m".format(skk)
def strCyan(skk):        return "\033[96m {}\033[00m".format(skk)
def strLightGray(skk):   return "\033[97m {}\033[00m".format(skk)
def strBlack(skk):       return "\033[98m {}\033[00m".format(skk)
def strBold(skk):        return "\033[1m {}\033[0m".format(skk)

# Method to get nearest strikes
def round_nearest(x,num=50): return int(math.ceil(float(x)/num)*num)
def nearest_strike_bnf(x): return round_nearest(x,100)
def nearest_strike_nf(x): return round_nearest(x,50)

# Urls for fetching Data
url_oc      = "https://www.nseindia.com/option-chain"
url_bnf     = 'https://www.nseindia.com/api/option-chain-indices?symbol=BANKNIFTY'
url_nf      = 'https://www.nseindia.com/api/option-chain-indices?symbol=NIFTY'
url_indices = "https://www.nseindia.com/api/allIndices"

# Headers
headers = {'user-agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/80.0.3987.149 Safari/537.36',
            'accept-language': 'en,gu;q=0.9,hi;q=0.8',
            'accept-encoding': 'gzip, deflate, br'}

sess = requests.Session()
cookies = dict()

# Local methods
def set_cookie():
    request = sess.get(url_oc, headers=headers, timeout=5)
    cookies = dict(request.cookies)

def get_data(url):
    set_cookie()
    response = sess.get(url, headers=headers, timeout=5, cookies=cookies)
    if(response.status_code==401):
        set_cookie()
        response = sess.get(url_nf, headers=headers, timeout=5, cookies=cookies)
    if(response.status_code==200):
        return response.text
    return ""

def set_header():
    global bnf_ul
    global nf_ul
    global bnf_nearest
    global nf_nearest
    response_text = get_data(url_indices)
    data = json.loads(response_text)
    for index in data["data"]:
        if index["index"]=="NIFTY 50":
            nf_ul = index["last"]
            print("nifty")
        if index["index"]=="NIFTY BANK":
            bnf_ul = index["last"]
            print("banknifty")
    bnf_nearest=nearest_strike_bnf(bnf_ul)
    nf_nearest=nearest_strike_nf(nf_ul)

# Showing Header in structured format with Last Price and Nearest Strike

def print_header(index="",ul=0,nearest=0):
    print(strPurple( index.ljust(12," ") + " => ")+ strLightPurple(" Last Price: ") + strBold(str(ul)) + strLightPurple(" Nearest Strike: ") + strBold(str(nearest)))

def print_hr():
    print(strYellow("|".rjust(70,"-")))

# Fetching CE and PE data based on Nearest Expiry Date
def print_oi(num,step,nearest,url):
    finalList = []

    now = datetime.datetime.now()
    strike = nearest - (step*num)
    start_strike = nearest - (step*num)
    response_text = get_data(url)
    data = json.loads(response_text)
    print('expiry dates...................',data["records"]["expiryDates"])
    currExpiryDate = data["records"]["expiryDates"][0]
    nextExpiryDate = data["records"]["expiryDates"][1]
    mothlyExpiry = '27-Jul-2023'
    for item in data['records']['data']:
        fielHeaders = item.keys()
        if 'CE' in item:
            if item["CE"]["openInterest"] > 1000:
                item['CE']['time'] = now.time()
                finalList.append(item['CE'])
        if 'PE' in item:
            if item["PE"]["openInterest"] > 1000:
                item['PE']['time'] = now.time()
                finalList.append(item['PE'])
      
    findalDf = pd.DataFrame(finalList)
    
    columns = list(findalDf.columns.values)
    print(columns)
    
    today = now.strftime("%m-%d-%Y")
    
    fileName = today + ' OiData.csv'
    save(fileName,findalDf,fielHeaders)
    
    


#check if dir exist if not create it
def check_dir(pathToFile,file_name):
    pathToFile = pathToFile+file_name
    path = Path(pathToFile)
    #directory = os.path.dirname(cuurentDirectory)
    print('Directory...........',pathToFile)
    if not path.is_file():
        return False
    else:
        return True

def save(file_name, records,header):
    cuurentDirectory = os.path.abspath(os.path.join(os.path.curdir))
    pathToFile = cuurentDirectory+"/data/"
    #fileExists = check_dir(pathToFile,file_name)
    fileExists = file_exists(file_name)
    print('FilessWxxistsss',fileExists)
    if(fileExists == False):
        records.to_csv(file_name, mode='a', index=False ,header =True)
    else:
        records.to_csv(file_name, mode='a', index=False,header =False)
    

    

while datetime.time(9, 15) < datetime.datetime.now().time() < datetime.time(22, 33):
    set_header()
    print('\033c')
    '''print_hr()
    print_header("Nifty",nf_ul,nf_nearest)
    print_hr()
    print_oi(10,50,nf_nearest,url_nf)'''
    print_hr()
    print_header("Bank Nifty",bnf_ul,bnf_nearest)
    print_hr()
    print_oi(20,100,bnf_nearest,url_bnf)
    print_hr()
    time.sleep(100)
print("Session Ended !!!!") if datetime.datetime.now().time() > datetime.time(15, 15) else print("Wait till 9:20 !!!!")

